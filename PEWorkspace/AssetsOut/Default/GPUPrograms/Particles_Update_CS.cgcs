#ifndef PARTICLES_UPDATE_CS_cg
#define PARTICLES_UPDATE_CS_cg

#include "APIAbstraction.gpu"
#include "StandardConstants.fx"
#include "ParticleStructsandConstants.fx"

ConsumeStructuredBuffer<Particle> ParticlePool : register(u1);
AppendStructuredBuffer<Particle> Output : register(u2);

[numthreads(32, 1, 1)]
void main( uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex )
{
	Particle p = ParticlePool.Consume();

	p.m_currtime += gGameTimes.y;
	//p.m_lifetime -= gGameTimes.y;
	p.m_velocity += make_float3(gEmitAccel.x, gEmitAccel.y, gEmitAccel.z) * gGameTimes.y;
	p.m_position += p.m_velocity * gGameTimes.y;
	
	
	if(p.m_currtime < p.m_lifetime)
	//if(p.m_lifetime > 0)
		Output.Append(p);
}

#endif